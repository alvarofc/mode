// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.4
// source: proto/imagegen/v1/imagegen.proto

package imagegenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageGenerator_GenerateImage_FullMethodName = "/imagegen.v1.ImageGenerator/GenerateImage"
)

// ImageGeneratorClient is the client API for ImageGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageGeneratorClient interface {
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
}

type imageGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewImageGeneratorClient(cc grpc.ClientConnInterface) ImageGeneratorClient {
	return &imageGeneratorClient{cc}
}

func (c *imageGeneratorClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, ImageGenerator_GenerateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageGeneratorServer is the server API for ImageGenerator service.
// All implementations must embed UnimplementedImageGeneratorServer
// for forward compatibility.
type ImageGeneratorServer interface {
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	mustEmbedUnimplementedImageGeneratorServer()
}

// UnimplementedImageGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageGeneratorServer struct{}

func (UnimplementedImageGeneratorServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedImageGeneratorServer) mustEmbedUnimplementedImageGeneratorServer() {}
func (UnimplementedImageGeneratorServer) testEmbeddedByValue()                        {}

// UnsafeImageGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageGeneratorServer will
// result in compilation errors.
type UnsafeImageGeneratorServer interface {
	mustEmbedUnimplementedImageGeneratorServer()
}

func RegisterImageGeneratorServer(s grpc.ServiceRegistrar, srv ImageGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedImageGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageGenerator_ServiceDesc, srv)
}

func _ImageGenerator_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageGeneratorServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageGenerator_GenerateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageGeneratorServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageGenerator_ServiceDesc is the grpc.ServiceDesc for ImageGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imagegen.v1.ImageGenerator",
	HandlerType: (*ImageGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateImage",
			Handler:    _ImageGenerator_GenerateImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imagegen/v1/imagegen.proto",
}
